import SwiftUI
import CoreData

struct LogMedicationSheet: View {
    @Environment(\.managedObjectContext) private var moc
    var medication: Medication
    @Binding var isPresented: Bool
    @State private var showReminderOptions = false
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                HStack {
                    VStack(alignment: .leading) {
                        Text("Medication")
                            .font(.headline)
                            .foregroundColor(.gray)
                        Text(medication.name ?? "Unknown")
                            .font(.title)
                            .fontWeight(.bold)
                    }
                    Spacer()
                }
                .padding()
                
                Divider()
                
                VStack(alignment: .leading) {
                    Text("Dosage")
                        .font(.headline)
                        .foregroundColor(.gray)
                    Text("\(medication.dosage?.amount ?? 0, specifier: "%.1f") \(medication.dosage?.unit ?? "mg")")
                        .font(.body)
                }
                .padding(.horizontal)
                
                Divider()
                
                Text("Today's Date: \(Date(), formatter: LogMedicationSheet.dateFormatter)")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .padding()
                
                Spacer()
                
                Button(action: {
                    markMedicationAsTaken()
                    isPresented = false
                }) {
                    Text("Mark as Taken")
                        .frame(minWidth: 0, maxWidth: .infinity)
                        .frame(height: 44)
                        .foregroundColor(.white)
                        .background(Color(red:0.047, green:0.482, blue:0.862))
                        .cornerRadius(22)
                }
                .padding(.horizontal)
                Button(action: {
                    isPresented = false
                }) {
                    Text("Mark as Not Taken")
                        .frame(minWidth: 0, maxWidth: .infinity)
                        .frame(height: 44)
                        .foregroundColor(.white)
                        .background(Color(red:0.862, green:0.196, blue:0.125))
                        .cornerRadius(22)
                }
                .padding([.horizontal])
                Button(action: {
                    showReminderOptions = true
                }) {
                    HStack {
                        Image(systemName: "bell")
                        Text("Remind Me")
                    }
                    .frame(minWidth: 0, maxWidth: .infinity)
                    .frame(height: 44)
                    .foregroundColor(.white)
                    .background(Color(red:1, green:0.760, blue:0.039))
                    .cornerRadius(22)
                }
                
                
                .padding(.horizontal)
            }
            .navigationTitle("Medication Details")
            .navigationBarItems(trailing: Button("Done") {
                isPresented = false
            })
        }
        .sheet(isPresented: $showReminderOptions) {
            ReminderOptionsView(medication: medication, isPresented: $showReminderOptions)
        }
    }
    
    private func markMedicationAsTaken() {
        let today = Calendar.current.startOfDay(for: Date())
        
        // Try to find an existing MedicationDateStatus for today
        let existingDateStatus = medication.dateStatusArray.first {
            Calendar.current.isDate($0.date!, inSameDayAs: today)
        }
        
        if let dateStatus = existingDateStatus {
            // If found, mark it as taken
            dateStatus.taken = true
        } else {
            // If not found, create a new MedicationDateStatus for today
            let newDateStatus = MedicationDateStatus(context: moc)
            newDateStatus.date = today
            newDateStatus.taken = true
            // Assume `addToDateStatuses` is a method generated by Core Data for the relationship
            medication.addToDateStatuses(newDateStatus)
        }
        
        // Save the changes to the Managed Object Context
        do {
            try moc.save()
        } catch {
            print("Could not mark medication as taken: \(error.localizedDescription)")
        }
    }
    
    
    private static let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .long
        formatter.timeStyle = .short
        return formatter
    }()
}
